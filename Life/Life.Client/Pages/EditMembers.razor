@page "/edit-members"
@page "/edit-members/{id:int}"
@using Life.Shared.Entities.Enums
@inject NavigationManager NavigationManager
@inject HttpClient Http
@rendermode @(new InteractiveWebAssemblyRenderMode(prerender : false))

@if (Id == null)
{
    <h3>Add Members</h3>
}
else
{
    <h3>Edit @member.Name</h3>
}

<EditForm Model="member" OnSubmit="HandleSubmit">
    <div>
        <label for="name">Name</label>
        <InputText id="name" @bind-Value="member.Name" class="form-control" placeholder="Win Chester" required />
    </div>
    <div>
        <label for="role">Role</label>
        <InputSelect id="role" @bind-Value="member.RoleType" class="form-control" required >
            @foreach (var role in Enum.GetValues(typeof(RoleType)))
            {
                <option value="@role">@role</option>
            }
        </InputSelect>
    </div>
    <div>
        <label for="licenseNumber">License Number</label>
        <InputText id="licenseNumber" @bind-Value="member.LicenseNumber" class="form-control" placeholder="007" required  />
    </div>
    <div>
        <label for="isActive">Is Active?</label>
        <InputSelect id="isActive" @bind-Value="member.IsActive" class="form-control" required  >
            <option value="true">Active</option>
            <option value="false">Inactive</option>
        </InputSelect>
    </div>
    <button type="submit" class="btn btn-primary">Save</button>
</EditForm>

@code {
    [Parameter] 
    public int? Id { get; set; }

    public Member member { get; set; } = new Member();

    protected override async Task OnParametersSetAsync()
    {
        if (Id is not null)
        {
            var result = await Http.GetFromJsonAsync<Member>($"api/members/{(int)Id}");
            if (result is not null)
            {
                member = result;
            }
        }
    }

    async Task HandleSubmit()
    {
        if (Id is not null)
        {
            var result = await Http.PutAsJsonAsync($"api/members/{Id}",member);
            //member = await result.Content.ReadFromJsonAsync<Member>() ?? throw new InvalidOperationException();
        }
        else
        {
            var result = await Http.PostAsJsonAsync($"api/members",member);
            member = await result.Content.ReadFromJsonAsync<Member>() ?? throw new InvalidOperationException();
        }
        
        NavigationManager.NavigateTo("/Members");
    }

}